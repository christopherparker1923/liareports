// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ext_expires_in    Int?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  phoneNumber  String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.VarChar(10000)
  accounts      Account[]
  sessions      Session[]
  Project       Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ManufacturerPart {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  partNumber       String
  partType         PartTypes
  length           Float?
  width            Float?
  height           Float?
  CSACert          Boolean
  ULCert           Boolean
  preference       Int
  description      String?
  partTags         PartTag[]
  image            String?
  Manufacturer     Manufacturer  @relation(fields: [manufacturerName], references: [name])
  manufacturerName String
  ProjectPart      ProjectPart[]
  VendorPart       VendorPart[]

  @@unique([manufacturerName, partNumber])
}

model VendorPart {
  id                     String           @id @default(cuid())
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  ManufacturerPart       ManufacturerPart @relation(fields: [manufacturerPartNumber], references: [id])
  manufacturerPartNumber String
  Vendor                 Vendor           @relation(fields: [vendorId], references: [id])
  vendorId               String
  price                  Float
  stock                  Int
  leadTime               Int //Days

  @@index([manufacturerPartNumber])
  @@index([vendorId])
}

model PartTag {
  id                Int                @id @default(autoincrement())
  name              PartTags           @unique
  manufacturerParts ManufacturerPart[]
}

model Manufacturer {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  name              String             @unique
  manufacturerParts ManufacturerPart[]
}

model Vendor {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String       @unique
  vendorParts VendorPart[]
}

model Project {
  id              Int            @id @default(autoincrement())
  projectNumber   String         @unique
  name            String
  description     String
  revision        String
  status          String?
  projectLead     String?
  createdBy       User?          @relation(fields: [userId], references: [id])
  parts           ProjectPart[]
  projectChildren ProjectChild[]
  userId          String?

  @@index([userId])
}

model ProjectChild {
  id              Int            @id @default(autoincrement())
  project         Project?       @relation(fields: [projectNumber], references: [projectNumber])
  projectNumber   String?
  parent          ProjectChild?  @relation("ProjectChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId        Int?
  projectChildren ProjectChild[] @relation("ProjectChild")
  name            String
  revision        String
  status          String
  projectParts    ProjectPart[]
  childType       ChildTypes

  @@index([projectNumber])
  @@index([parentId])
}

model ProjectPart {
  id                 Int              @id @default(autoincrement())
  manufacturerPart   ManufacturerPart @relation(fields: [manufacturerPartId], references: [id])
  manufacturerPartId String
  project            Project?         @relation(fields: [projectNumber], references: [projectNumber])
  projectNumber      String?
  parent             ProjectChild?    @relation(fields: [parentId], references: [id])
  parentId           Int?

  @@index([manufacturerPartId])
  @@index([projectNumber])
  @@index([parentId])
}

enum PartTypes {
  Cable
  Card
  CircuitBreaker
  Connector
  Contactor
  Disconnect
  DisctrobutionBlock
  Enclosure
  EthernetSwitch
  Fastener
  Fuse
  Guarding
  Lamacoid
  Light
  Misc
  Overload
  PowerSupply
  PushButton
  Receptacle
  Relay
  SelectorSwitch
  SmartPac
  Terminals
  Transformer
  Wire
  Wireway
}

enum PartTags {
  CompactLogix
  ControlLogix
  Ethernet
  FlexIO
  GuardLogix
  NX
  PointIO
}

enum ChildTypes {
  Backplate
  Panel
  Phase
  Misc
  Rack
}
